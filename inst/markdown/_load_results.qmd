 
```{r}
#| eval: true
#| output: false
#| echo: false
#| label: load-data-from-R

 
  require(spsUtil)
  quietly = spsUtil::quiet

  require(flextable)
  require(gt)  # table formatting
  require(ggplot2)
  require(data.table) # for speed
  require(lubridate)
  require(stringr) 
  
  require(janitor)
 
  require(aegis)  # basic helper tools
  require(bio.taxonomy)  # handle species codes
  require(bio.snowcrab)

  require(spsUtil)
  quietly = spsUtil::quiet

  require(MBA)

  # reload these in case of local edits
  loadfunctions( "aegis")
  loadfunctions( "bio.snowcrab")  

  # local functions that help (sometimes with table formatting) ... obsolete? .. need to check
  knit_print.flextable <- function (x, ...) {
    is_bookdown <- flextable:::is_in_bookdown()
    is_quarto <- flextable:::is_in_quarto()
    x <- flextable:::knitr_update_properties(x, bookdown = is_bookdown, quarto = is_quarto)
    if (is.null(knitr::pandoc_to())) {
        str <- flextable:::to_html(x, type = "table")
        str <- knitr:::asis_output(str)
    }
    else if (!is.null(getOption("xaringan.page_number.offset"))) {
        str <- knit_to_html:::knit_to_html(x, bookdown = FALSE, quarto = FALSE)
        str <- knitr:::asis_output(str, meta = html_dependencies_list(x))
    }
    else if (knitr:::is_html_output(excludes = "gfm")) {
        str <- knit_to_html:::knit_to_html(x, bookdown = is_bookdown, quarto = is_quarto)
        str <- knit_to_html:::raw_html(str, meta = html_dependencies_list(x))
    }
    else if (knitr:::is_latex_output()) {
        str <- flextable:::knit_to_latex(x, bookdown = is_bookdown, quarto = is_quarto)
        str <- flextable:::raw_latex(x = str, meta = unname(list_latex_dep(float = TRUE, 
            wrapfig = TRUE)))
    }
    else if (grepl("docx", knitr::opts_knit$get("rmarkdown.pandoc.to"))) {
        if (rmarkdown::pandoc_version() < numeric_version("2")) {
            stop("pandoc version >= 2 required for printing flextable in docx")
        }
        str <- flextable:::knit_to_wml(x, bookdown = is_bookdown, quarto = is_quarto)
        str <- gsub("</w:tbl>","</w:tbl><w:p></w:p>",str, fixed =  TRUE)
        str <- knitr:::asis_output(str)
    }
    else if (grepl("pptx", knitr::opts_knit$get("rmarkdown.pandoc.to"))) {
        if (rmarkdown::pandoc_version() < numeric_version("2.4")) {
            stop("pandoc version >= 2.4 required for printing flextable in pptx")
        }
        str <- flextable:::knit_to_pml(x)
        str <- knitr:::asis_output(str)
    }
    else {
        plot_counter <- getFromNamespace("plot_counter", "knitr")
        in_base_dir <- getFromNamespace("in_base_dir", "knitr")
        tmp <- fig_path("png", number = plot_counter())
        in_base_dir({
            dir.create(dirname(tmp), showWarnings = FALSE, recursive = TRUE)
            save_as_image(x, path = tmp, expand = 0)
        })
        str <- include_graphics(tmp)
    }
    str

  }

  registerS3method(
    "knit_print", 'flextable', knit_print.flextable, 
    envir = asNamespace("flextable") 
    # important to overwrite {flextable}s knit_print
  )


  knit_print.gt_tbl <- function (x, ..., inline = FALSE) {
    if (gt:::knitr_is_rtf_output()) {
        x <- gt:::as_rtf(x)
    }
    else if (knitr::is_latex_output()) {
        x <- gt:::as_latex(x)
    }
    else if (gt:::knitr_is_word_output()) {
       str <- gsub("</w:tbl>","</w:tbl><w:p></w:p>", as_word(x), fixed = TRUE)
        x <- knitr::asis_output(paste("\n\n``````{=openxml}", str, 
            "``````\n\n", sep = "\n"))
    }
    else {
        x <- htmltools:::as.tags(x, ...)
    }
    knitr::knit_print(x, ..., inline = FALSE)
  }



  registerS3method(
    "knit_print", 'gt_tbl', knit_print.gt_tbl, 
    envir = asNamespace("gt") 
    # important to overwrite {gt}s knit_print
  )

  # params from yaml (above)
  attach(params)  

  media_loc = file.path( data_loc, "media" )

  year_previous = year_assessment - 1


  #### params and directories

  p = load.environment( year.assessment=year_assessment )  

  p$corners = data.frame(plon=c(220, 990), plat=c(4750, 5270) )

  p$mapyears = year_assessment + c(-5:0 )   # default in case not specified


  years = as.character(1996: year_assessment)
  yrs_observer = year_assessment + c(0:-4)


  if (!exists("toget")) toget=""


  if ( "fishery_results" %in% toget ) {
    
    # note copied "roadshow figures" temporaily here ... figure creation should be be assimilated TODO
    media_supplementary = file.path( data_loc, "assessments",  year_assessment, "media_supplementary")

    outtabledir = file.path( p$annual.results, "tables" ) 

    lregions = list(region=c("cfanorth", "cfasouth", "cfa4x"))
    reg_labels = c("N-ENS", "S-ENS", "CFA 4X")  # formatted for label

    if (params$sens==2) {
        lregions = list(subarea=c("cfanorth", "cfa23",  "cfa24", "cfa4x"))
        reg_labels = c("CFA 20-22", "CFA 23", "CFA 24", "CFA 4X")  # formatted for label
    }

    vnr = names(lregions)
    regions = unname( unlist(lregions) )
    
    nregions = length(regions)
 
    FD = fishery_data( regions=lregions)  # mass in tonnes

    fda = FD$summary_annual
    fdm = FD$summary_monthly
    fdb = FD$summary_biweekly

    dt = as.data.frame( fda[ which(fda$yr %in% c(year_assessment - c(0:10))),] )
    dt =  dt[,c(vnr, "yr", "Licenses", "TAC", "landings", "effort", "cpue")] 
    names(dt) = c("Region", "Year", "Licenses", "TAC", "Landings", "Effort", "CPUE") 
    rownames(dt) = NULL

    # observer data
    odb0 = setDT(observer.db("odb"))
    odb0[[vnr]] = NA
    for ( reg in regions) {
        r = polygon_inside(x = odb0, region = aegis.polygons::polygon_internal_code(reg), planar=FALSE)
        odb0[[vnr]][r] = reg
    }

    # bycatch summaries
    BC = list()
    for ( reg in c(regions, "cfaall")) {
        oo = observer.db( DS="bycatch_summary", p=p,  yrs=p$yrs, region=reg  )  # using polygon test
        if (is.null(oo)) { 
        message( "bycatch data is likely broken .. check" ) 
        }
        BC[[reg]] = oo
        BC[[reg]]$bycatch_table_effort[ BC[[reg]]$bycatch_table_effort==0 ] = NA
        BC[[reg]]$bycatch_table_effort[ is.na(BC[[reg]]$bycatch_table_effort) ] = "."
        BC[[reg]]$bycatch_table_catch[ BC[[reg]]$bycatch_table_catch==0 ] = NA
        BC[[reg]]$bycatch_table_catch[ is.na(BC[[reg]]$bycatch_table_catch) ] = "."
        
    }
  
 
    l_nens = round(fda$landings[which(fda$region=="cfanorth" & fda$yr==year_assessment)], 1)
    l_sens = round(fda$landings[which(fda$region=="cfasouth" & fda$yr==year_assessment)], 1)
    l_4x = round(fda$landings[which(fda$region=="cfa4x" & fda$yr==year_assessment)], 1)
    
    l_nens_p = round(fda$landings[which(fda$region=="cfanorth" & fda$yr==year_previous)], 1)
    l_sens_p = round(fda$landings[which(fda$region=="cfasouth" & fda$yr==year_previous)], 1 )
    l_4x_p = round(fda$landings[which(fda$region=="cfa4x" & fda$yr==year_previous)], 1)

    dt_l_nens = round((l_nens - l_nens_p)  / l_nens_p *100, 1 )
    dt_l_sens = round((l_sens - l_sens_p)  / l_sens_p *100, 1 )
    dt_l_4x = round((l_4x - l_4x_p)  / l_4x_p *100, 1 )
    
    e_nens = round(fda$effort[which(fda$region=="cfanorth" & fda$yr==year_assessment)], 3)
    e_sens = round(fda$effort[which(fda$region=="cfasouth" & fda$yr==year_assessment)], 3)
    e_4x = round(fda$effort[which(fda$region=="cfa4x" & fda$yr==year_assessment)], 3)

    e_nens_p = round(fda$effort[which(fda$region=="cfanorth" & fda$yr==year_previous)], 3)
    e_sens_p = round(fda$effort[which(fda$region=="cfasouth" & fda$yr==year_previous)], 3)
    e_4x_p = round(fda$effort[which(fda$region=="cfa4x" & fda$yr==year_previous)], 3)

    dt_e_nens = round(( e_nens - e_nens_p ) /e_nens_p * 100, 1 )
    dt_e_sens = round(( e_sens - e_sens_p ) /e_sens_p * 100, 1 )
    dt_e_4x = round(( e_4x - e_4x_p ) /e_4x_p * 100, 1 )

    c_nens = round(fda$cpue[which(fda$region=="cfanorth" & fda$yr==year_assessment)], 2)
    c_sens = round(fda$cpue[which(fda$region=="cfasouth" & fda$yr==year_assessment)], 2)
    c_4x = round(fda$cpue[which(fda$region=="cfa4x" & fda$yr==year_assessment)], 2)

    c_nens_p = round(fda$cpue[which(fda$region=="cfanorth" & fda$yr==year_previous)], 2)
    c_sens_p = round(fda$cpue[which(fda$region=="cfasouth" & fda$yr==year_previous)], 2)
    c_4x_p = round(fda$cpue[which(fda$region=="cfa4x" & fda$yr==year_previous)], 2)

    dt_c_nens = round(( c_nens - c_nens_p ) /c_nens_p * 100, 1 )
    dt_c_sens = round(( c_sens - c_sens_p ) /c_sens_p * 100, 1 )
    dt_c_4x = round(( c_4x - c_4x_p ) /c_4x_p * 100, 1 )

    dt = as.data.frame( fda[ which(fda$yr %in% c(year_assessment - c(0:10))),] )
    dt =  dt[,c("region", "yr", "Licenses", "TAC", "landings", "effort", "cpue")] 
    names(dt) = c("Region", "Year", "Licenses", "TAC", "Landings", "Effort", "CPUE") 
    rownames(dt) = NULL
    
    tac_nens = fda$TAC[which(fda$yr==year_assessment & fda$region=="cfanorth")]
    tac_sens = fda$TAC[which(fda$yr==year_assessment & fda$region=="cfasouth")]
    tac_4x = fda$TAC[which(fda$yr==year_assessment & fda$region=="cfa4x")] # 4x is refered by start year
    tac_4x_p = fda$TAC[which(fda$yr==year_previous & fda$region=="cfa4x")] # 4x is refered by start year
    fda = NULL

    scn = FD$shell_condition
    cc_soft_nens = scn[ region=="cfanorth" & fishyr==year_assessment & shell %in% c(1,2), sum(percent)]
    cc_soft_sens = scn[ region=="cfasouth" & fishyr==year_assessment & shell %in% c(1,2), sum(percent)]
    cc_soft_4x = scn[ region=="cfa4x" & fishyr==year_assessment & shell %in% c(1,2), sum(percent)]
    cc_soft_nens_p = scn[ region=="cfanorth" & fishyr==year_previous & shell %in% c(1,2), sum(percent)]
    cc_soft_sens_p = scn[ region=="cfasouth" & fishyr==year_previous & shell %in% c(1,2), sum(percent)]
    cc_soft_4x_p = scn[ region=="cfa4x" & fishyr==year_previous & shell %in% c(1,2), sum(percent)]
    scn = NULL

    # here mean is used to force result as a scalar
    fob = FD$fraction_observed
    observed_nens = fob[ region=="cfanorth" & yr==year_assessment, mean(observed_landings_pct, na.rm=TRUE) ]
    observed_sens = fob[ region=="cfasouth" & yr==year_assessment, mean(observed_landings_pct, na.rm=TRUE) ]
    observed_4x = fob[ region=="cfa4x" & yr==year_assessment, mean(observed_landings_pct, na.rm=TRUE) ]
    observed_nens_p = fob[ region=="cfanorth" & yr==year_previous, mean(observed_landings_pct, na.rm=TRUE) ]
    observed_sens_p = fob[ region=="cfasouth" & yr==year_previous, mean(observed_landings_pct, na.rm=TRUE) ]
    observed_4x_p = fob[ region=="cfa4x" & yr==year_previous, mean(observed_landings_pct, na.rm=TRUE) ]
    fob = NULL
     
  }


  if ( "ecosystem" %in% toget ) {
    # predator diet data
    diet_data_dir = file.path( data_loc, "data", "diets" )
    
    # assimilate the CSV data tables:
    # diet = get_feeding_data( diet_data_dir, redo=TRUE )  # if there is a data update
    diet = get_feeding_data( diet_data_dir, redo=FALSE )
    tx = taxa_to_code("snow crab")  
    # matching codes are 
    #  spec    tsn                  tx                   vern tx_index
    #1  528 172379        BENTHODESMUS           BENTHODESMUS     1659
    #2 2522  98427        CHIONOECETES SPIDER QUEEN SNOW UNID      728
    #3 2526  98428 CHIONOECETES OPILIO        SNOW CRAB QUEEN      729
    # 2 and 3 are correct

    snowcrab_predators = diet[ preyspeccd %in% c(2522, 2526), ]  # n=159 oservations out of a total of 58287 observations in db (=0.28% of all data)
    snowcrab_predators$Species = code_to_taxa(snowcrab_predators$spec)$vern
    snowcrab_predators$Predator = factor(snowcrab_predators$Species)
    
    counts = snowcrab_predators[ , .(Frequency=.N), by=.(Species)]
    setorderv(counts, "Frequency", order=-1)
    
    # species composition
    psp = speciescomposition_parameters( yrs=p$yrs, carstm_model_label="default" )
    pca = speciescomposition_db( DS="pca", p=psp )  

    pcadata = as.data.frame( pca$loadings )
    pcadata$vern = stringr::str_to_title( taxonomy.recode( from="spec", to="taxa", tolookup=rownames( pcadata ) )$vern )
    
    # recode region to selection above:

    set0 = snowcrab.db(p=p, DS="set.biologicals")
    setDT(set0)
    # check towquality .. this should always == 1
    if (length( unique( set0$towquality) ) != 1 ) print("error -- not good tows")
    set0$region = NA
    for (reg in regions ) {
        d = polygon_inside(set0[,c("lon","lat")], reg)
        set0$region[d] = reg 
    }


    # recode region to selection above:

    det0 = snowcrab.db( p=p, DS="det.georeferenced" )
    setDT(det0)
    det0$fishyr = det0$yr  ## the counting routine expects this variable
    det0$region = NA
    for ( reg in regions) {
        r = polygon_inside(x = det0, region = aegis.polygons::polygon_internal_code(reg), planar=FALSE)
        det0$region[r] = reg
    }
    
 
    # predator diet data
    diet_data_dir = file.path( data_loc, "data", "diets" )
 
    # assimilate the CSV data tables:
    # diet = get_feeding_data( diet_data_dir, redo=TRUE )  # if there is a data update
    diet = get_feeding_data( diet_data_dir, redo=FALSE )
    tx = taxa_to_code("snow crab")  
    # matching codes are 
    #  spec    tsn                  tx                   vern tx_index
    #1  528 172379        BENTHODESMUS           BENTHODESMUS     1659
    #2 2522  98427        CHIONOECETES SPIDER QUEEN SNOW UNID      728
    #3 2526  98428 CHIONOECETES OPILIO        SNOW CRAB QUEEN      729
    # 2 and 3 are correct

    snowcrab_predators = diet[ preyspeccd %in% c(2522, 2526), ]  # n=159 oservations out of a total of 58287 observations in db (=0.28% of all data)
    snowcrab_predators$Species = code_to_taxa(snowcrab_predators$spec)$vern
    snowcrab_predators$Predator = factor(snowcrab_predators$Species)

    counts = snowcrab_predators[ , .(Frequency=.N), by=.(Species)]
    setorderv(counts, "Frequency", order=-1)

    # species composition
    psp = speciescomposition_parameters( yrs=p$yrs, carstm_model_label="default" )
    pca = speciescomposition_db( DS="pca", p=psp )  

    pcadata = as.data.frame( pca$loadings )
    pcadata$vern = stringr::str_to_title( taxonomy.recode( from="spec", to="taxa", tolookup=rownames( pcadata ) )$vern )

  }


  if ( "fishery_model" %in% toget ) {
 
    fishery_model_results = file.path( data_loc, "fishery_model" )
        
    fm_loc = file.path( data_loc, 'fishery_model', year_assessment, model_variation )
    
    # as modelled years in fishery model can differ from iput data years, make sure  "years_model" is correct
    years_model = p$fishery_model_years = 2000:year_assessment
                
    method = "logistic_discrete_historical"
    loc = file.path(data_loc, "fishery_model", year_assessment, method )

    b1north = fread( file.path(loc, "results_turing_cfanorth_bio_fishing.csv"), header=TRUE, sep=";" )
    b1south = fread( file.path(loc, "results_turing_cfasouth_bio_fishing.csv"), header=TRUE, sep=";" )
    b14x = fread( file.path(loc, "results_turing_cfa4x_bio_fishing.csv"), header=TRUE, sep=";" )

    t1 = which(years_model == year_assessment -1 )
    t0 = which(years_model == year_assessment )

    B_north = rowMeans(b1north, na.rm=TRUE )
    B_south = rowMeans(b1south, na.rm=TRUE )
    B_4x = rowMeans(b14x, na.rm=TRUE )

    B_north_sd = apply(b1north, 1, sd, na.rm=TRUE )
    B_south_sd = apply(b1south, 1, sd, na.rm=TRUE )
    B_4x_sd = apply(b14x, 1, sd, na.rm=TRUE )


    fmnorth = fread( file.path(loc, "results_turing_cfanorth_fm.csv"), header=TRUE, sep=";" )
    fmsouth = fread( file.path(loc, "results_turing_cfasouth_fm.csv"), header=TRUE, sep=";" )
    fm4x = fread( file.path(loc, "results_turing_cfa4x_fm.csv"), header=TRUE, sep=";" )

    FM_north = rowMeans(fmnorth, na.rm=TRUE )
    FM_south = rowMeans(fmsouth, na.rm=TRUE )
    FM_4x = rowMeans(fm4x, na.rm=TRUE )

    FM_north_sd = apply(fmnorth, 1, sd, na.rm=TRUE )
    FM_south_sd = apply(fmsouth, 1, sd, na.rm=TRUE )
    FM_4x_sd = apply(fm4x, 1, sd, na.rm=TRUE )


    fsnorth = fread( file.path(loc, "results_turing_cfanorth_summary.csv"), header=TRUE, sep=";" )
    fssouth = fread( file.path(loc, "results_turing_cfasouth_summary.csv"), header=TRUE, sep=";" )
    fs4x = fread( file.path(loc, "results_turing_cfa4x_summary.csv"), header=TRUE, sep=";" )

    Knorth = fsnorth[which(fsnorth$parameters=="K"),]
    Ksouth = fssouth[which(fssouth$parameters=="K"),]
    K4x = fs4x[which(fs4x$parameters=="K"),]
    
    K_north = round(Knorth[["mean"]], 2 )
    K_south = round(Ksouth[["mean"]], 2 )
    K_4x = round(K4x[["mean"]], 2 )

    K_north_sd = round(Knorth[["std"]], 2 )
    K_south_sd = round(Ksouth[["std"]], 2 )
    K_4x_sd = round(K4x[["std"]], 2 )

    rnorth = fsnorth[which(fsnorth$parameters=="r"),]
    rsouth = fssouth[which(fssouth$parameters=="r"),]
    r4x = fs4x[which(fs4x$parameters=="r"),]

    r_north = round(rnorth[["mean"]], 2 )
    r_south = round(rsouth[["mean"]], 2 )
    r_4x = round(r4x[["mean"]], 2 )

    r_north_sd = round(rnorth[["std"]], 2 )
    r_south_sd = round(rsouth[["std"]], 2 )
    r_4x_sd = round(r4x[["std"]], 2 )


    qnorth = fsnorth[which(fsnorth$parameters=="q1"),]
    qsouth = fssouth[which(fssouth$parameters=="q1"),]
    q4x = fs4x[which(fs4x$parameters=="q1"),]

    q_north = round(qnorth[["mean"]], 2 )
    q_south = round(qsouth[["mean"]], 2 )
    q_4x = round(q4x[["mean"]], 2 )

    q_north_sd = round(qnorth[["std"]], 2 )
    q_south_sd = round(qsouth[["std"]], 2 )
    q_4x_sd = round(q4x[["std"]], 2 )

  }

```
